"""
Django settings for bookstore_project project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
# from django.core.management.utils import get_random_secret_key

from pathlib import Path


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

ENVIRONMENT = os.environ.get('ENVIRONMENT', default='development') # added to make code production ready


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = os.environ.get('SECRET_KEY', get_random_secret_key())
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(os.environ.get('DEBUG', default=0))

ALLOWED_HOSTS = ['pacific-brushlands-84298.herokuapp.com', 'localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',  # Yoohoo!!
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic',    # for deployment, use to serve static files
    'django.contrib.staticfiles',
    'django.contrib.sites', # new

    # 3rd party
    'crispy_forms',     # new
    'crispy_bootstrap4',    # recommendation stackoverflow
    'allauth',      # new
    'allauth.account',      # chatgpt
    'debug_toolbar',    # new, for optimization. This will create a debug toolbar

    # local
    'users.apps.UsersConfig',    # new
    'pages.apps.PagesConfig',    # new
    'books.apps.BooksConfig',    # new
    'orders.apps.OrdersConfig', # new
]

CRISPY_TEMPLATE_PACK = 'bootstrap4' # new

AUTH_USER_MODEL = 'users.CustomUser'    # new

MIDDLEWARE = [
    'django.middleware.cache.UpdateCacheMiddleware', # new, for per site caching, the simplest caching approach
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',   # for deployment,  use to serve static files
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware', # new, for optimization. This will create a debug toolbar

    # 3rd party
    'allauth.account.middleware.AccountMiddleware',    # changed from 'allauth.account',  # new
    'django.middleware.cache.FetchFromCacheMiddleware', # new, for per site caching, the simplest caching approach
]

CACHE_MIDDLEWARE_ALIAS = 'default'
CACHE_MIDDLEWARE_SECONDS = 604800
CACHE_MIDDLEWARE_KEY_PREFIX = ''

ROOT_URLCONF = 'bookstore_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # new
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bookstore_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': 'postgres',
        'HOST': 'db',
        'PORT': 5432,
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]   # new
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')     # new
STATICFILES_FINDERS = [     # new
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# django-allauth config
LOGIN_REDIRECT_URL = 'home' # redirects user after successful login
ACCOUNT_LOGOUT_REDIRECT_URL = 'home' # redirects after logout # new, updated after allauth

# bottom part

# django-allauth config
SITE_ID = 1     # new

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',    # new
    'allauth.account.auth_backends.AuthenticationBackend',  # new
)

ACCOUNT_SESSION_REMEMBER = True     # new /  this removes the remember me in login

ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False     # new / sets to only ask input password once

ACCOUNT_USERNAME_REQUIRED = False   # new

ACCOUNT_AUTHENTICATION_METHOD = 'email'     # new

ACCOUNT_EMAIL_REQUIRED = True       # new

ACCOUNT_UNIQUE_EMAIL = True     # new

#EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'    # new
#DEFAULT_FROM_EMAIL = 'xyrillariel@gmail.com'
#EMAIL_HOST = 'smtp.sendgrid.net'       # new
#EMAIL_HOST_USER = 'apikey'       # new
#EMAIL_HOST_PASSWORD = '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'       # new
#EMAIL_PORT = 587       # new
#EMAIL_USE_TLS = True       # new

EMAIL_SSL_CERTIFILE = None
EMAIL_SSL_KEYFILE = None
EMAIL_SSL_CA_FILE = None

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

STRIPE_TEST_PUBLISHABLE_KEY = os.environ.get('STRIPE_TEST_PUBLISHABLE_KEY') # for payment
STRIPE_TEST_SECRET_KEY = os.environ.get('STRIPE_TEST_SECRET_KEY') # for payment

import socket # new, for optimization. Added after the debug toolbar was added at the top
hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
INTERNAL_IPS = [ip[:-1] + "1" for ip in ips]

if ENVIRONMENT == 'production':
    SECURE_BROWSER_XSS_FILTER = True        # XSS attack prevention
    X_FRAME_OPTIONS = 'DENY'                # Clickjacking prevention
    SECURE_SSL_REDIRECT = True              # for HTTPS/SSL
    SECURE_HSTS_SECONDS = 3600              # for HTTP Strict Transport Security (HSTS)
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True   # for HTTP Strict Transport Security (HSTS)
    SECURE_HSTS_PRELOAD = True              # for HTTP Strict Transport Security (HSTS)
    SECURE_CONTENT_TYPE_NOSNIFF = True      # for HTTP Strict Transport Security (HSTS)
    CSRF_COOKIE_SECURE = True               # for Secure Cookies
    SESSION_COOKIE_SECURE = True            # for Secure Cookies
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')   # for heroku



    # heroku
    import dj_database_url
    db_from_env = dj_database_url.config(conn_max_age=500)
    DATABASES['default'].update(db_from_env)